[{"categories":null,"content":"记录下brew使用问题 ","date":"2021-06-03","objectID":"https://www.nashome.cn/posts/brew_learn/:1:0","tags":null,"title":"Brew_learn","uri":"https://www.nashome.cn/posts/brew_learn/"},{"categories":null,"content":"安装失败 在安装flink的时候，用 brew install apache-flink 命令 报错。报错的信息如下，一开始认为是包的问题。后来发现哪怕是安装 wget 也会出问题。 后来，推断是brew 安装出了问题。 cd /usr/local/Homebrew/Library/Taps 删除 homebrew目录，再mkdir。 参照 这个 文章进行处理 https://zhuanlan.zhihu.com/p/90508170 ，重新安装。 主要是执行第二步：重新安装，第三步，设置镜像，第四步和第五步，设置bottles镜像。 brew update 再次验证一下：brew install wget。问题解决。 ","date":"2021-06-03","objectID":"https://www.nashome.cn/posts/brew_learn/:1:1","tags":null,"title":"Brew_learn","uri":"https://www.nashome.cn/posts/brew_learn/"},{"categories":null,"content":"大家好 这是我的博客，希望能写一些好的文章分享给大家~~~ ","date":"2021-05-22","objectID":"https://www.nashome.cn/posts/test/:1:0","tags":null,"title":"开博大吉","uri":"https://www.nashome.cn/posts/test/"},{"categories":null,"content":"1. 2021-05-21 增加评论功能 难点在于找到的一个discus组件，居然被墙了。原理很简单，就是将评论的内容，挂给第三方，直接读写在第三方论坛里面就可以。联想一下，查看墙内的用法。结果发现一个 valine 比较好用。 参照Hugo中加入Valine评论功能进行处理，但是给的模版范例不太一样。为了快速上线评论功能，于是把模版又更新了一把。现在有了评论功能了。开心～ 需要在 leancloud 上注册账号，我用的免费版，不知道以后会不会收费，会不会挂掉。 ","date":"2021-05-22","objectID":"https://www.nashome.cn/posts/new/:1:0","tags":null,"title":"迭代","uri":"https://www.nashome.cn/posts/new/"},{"categories":null,"content":"2. 2021-05-22 增加站内检索功能 站检索能力和评论一样，独立于博客之外，查阅资料后发现，algolia 就是我想要的。选择站点是HK，同样一个月10w次查询以下免费。 algolia教程 按照这个操作，并在配置中进行更新追加。 实操过程是编辑blog，提交blog之前。重新构造一个索引，并提交到algolia的项目。 1. 创建并编辑algolia配置文件，注意生成索引的目录条件。后面还可以扩展 # mkdir layout/_default # touch layout/_default/list.algolia.json {{/* 生成Algolia搜索索引文件 */}} {{- $.Scratch.Add \"index\" slice -}} {{/* content/posts或content/post目录下的博文才生成索引 */}} {{- range where (where .Site.Pages \"Type\" \"in\" (slice \"posts\" \"post\" \"life\" \"tech\")) \"IsPage\" true -}} {{- if and (not .Draft) (not .Params.private) -}} {{- $.Scratch.Add \"index\" (dict \"objectID\" .File.UniqueID \"url\" .Permalink \"content\" (.Summary | plainify) \"tags\" .Params.Tags \"lvl0\" .Title \"lvl1\" .Params.Categories \"lvl2\" \"摘要\") -}} {{- end -}} {{- end -}} {{- $.Scratch.Get \"index\" | jsonify -}} 2. 增加配置信息 # 编辑完成后，config.atoml 中增加 algolia配置, 具体配置信息在 algolia 登陆后查询获取 [languages.zh-cn.params.search.algolia] index = \"myBlog\" appID = \"********\" searchKey = \"**********\" 3. 生成索引，并自动上传索引文件 # npm init //如果没有npm 则 brew install npm # npm install atomic-algolia --save //这个命令会生成一个 json文件 # vim package.json { \"name\": \"mysite\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\", //这里多一个逗号 \"algolia\": \"atomic-algolia\" //添加这一行 }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"atomic-algolia\": \"^0.3.19\" } } # 在hugo 工程的 跟目录 编辑 .env文件 如果没有则新创一个。 注意是admin_key ALGOLIA_APP_ID=******** ALGOLIA_INDEX_NAME=myBlog ALGOLIA_INDEX_FILE=public/algolia.json ALGOLIA_ADMIN_KEY=******** ","date":"2021-05-22","objectID":"https://www.nashome.cn/posts/new/:2:0","tags":null,"title":"迭代","uri":"https://www.nashome.cn/posts/new/"},{"categories":null,"content":"背景 工作学习常见工具的使用，将案例和场景进行汇总，后续都丢到这里来。初步包括shell 命令，git命令，ide的使用等等 hugo 官方文档 在此。基本上照搬 安装 $ brew install hugo 生成站点， 用一次后面就基本上不会再用第二次，而且还需要额外配置。 $ hugo new site /path/to/site 创建一个 新的 文档 about，主要是附带了时间戳，注意修改完毕后，把draft改为 false $ hugo new about.md 本地运行hugo进行调试确认.后面默认，如果在config文件中配置完毕，不需要加 $ hugo server --theme=hyde --buildDrafts 最终部署。如果在config文件中配置完毕，不需要加配置 $ hugo --theme=hyde --baseUrl=\"http://coderzh.github.io/\" 执行完毕后，会生成public中的静态文件，这些文件提交到github上即可进行展示。 ","date":"0001-01-01","objectID":"https://www.nashome.cn/posts/%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/:0:1","tags":null,"title":"","uri":"https://www.nashome.cn/posts/%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"}]